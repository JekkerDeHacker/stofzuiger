#include <Servo.h>

Servo servoLeft, servoRight, servoGripper, servoEyes;

//DECLARATIONS

const float speed = 0.23;
const float rotationalspeed = 0.50; // rotations per second
int pos = 0;    // variable to store the servo position
float distance;
int encoderLeft=7;
int encoderRight=8;
int rightIRS//= [Right IR sensor pin];
int leftIRS//= [Left IR sensor pin];
int us//=[Ultrasound sensor pin];
int topIRS;// =pin for top sensor
float topIRSVolt; mapIR;
float volt_Low;//=lowvalue
float volt_High;//=highvalue

//FUNCTIONS

int IROutput(int PinLoc){
  if(digitalRead(PinLoc) ==0){
    return 0;
  }else{ return 1;
}
}

void forward(float distanceF, float forwardspeedF) {
  float result;
  result = (distanceF / forwardspeedF) * 1000;
  servoLeft.writeMicroseconds(1900);         // Left wheel counterclockwise
  servoRight.writeMicroseconds(1000);
//  servoLeft.write(180);
//  servoRight.write(40);
//    servoRight.write(3);
  delay(result);
}

void readspeed(){
  int encoderoutputLeft=digitalRead(encoderLeft);
  Serial.write(encoderoutputLeft);
  delay(2);
}

void turning(int degrees, float rotationalspeed) {
    //Serial.print(" Degrees received: ");
    //Serial.print(degrees);
    //Serial.println();
    //Serial.println("Rotational speed recieved: ");
    //Serial.print(rotationalspeed);
    //Serial.println();
    //delay(100);
    float result;
    result = (degrees / (rotationalspeed * 360)) * 1000;
    //Serial.println("Result computed: ");
    //Serial.print(result);
    //Serial.println();
    delay(100);
    servoLeft.write(180);
    servoRight.write(180);
    delay(result);
    }

void stopRobot() {
    servoLeft.write(90);
    servoRight.write(90);
  }

int analogOutput(int Sensor){
  IRVolt = analogRead(Sensor);
  MapIR = map(IRVolt, Volt_Low, Volt_High, 0, 255);
  return MapIR;
}

void searchLab(int Sensor){
  int K = 1;
  int CurrOut = 0;
  int PrevOut = 0;
  while (K=1){
    CurrOut = AnalogOutput(Sensor);
    if (CurrOut < PrevOut){
      turnLeft(15);
      K=0;
    }
    else{
      PrevOut = CurrOut;
      turnRight(15); //Keep going in a circle until the intensity starts lowering
    }
  }
}

void checkCourse(int Sensor){
  int K = 1;
  int CurrOut = 0;
  int PrevOut = 0;
  while (K=1){
    CurrOut = AnalogOutput(Sensor);
    if (CurrOut < PrevOut){
      stopRobot();
      K=0;
    }
    else{
      PrevOut = CurrOut;
    }
  }
}

void returnLab(){
//while the lab hasnt been found
searchLab();
forward();
checkCourse();
}

void reverse() {
  servoLeft.write(0);
  servoRight.write(180);

void CloseClamp() {
  servoLeft.write(90);
  servoRight.write(90);
  servoGripper.write(0);

void OpenClamp() {
  servoLeft.write(90);
  servoRight.write(90);
  servoGripper.write(210);
  
void HoldClamp() {
  servoLeft.write(90);
  servoRight.write(90);
  servoGripper.write(90);

void turnRight() {
  servoLeft.write(180);
  servoRight.write(180);
  
void turnLeft() {
  servoLeft.write(0);
  servoRight.write(0);
  
//PROGRAM

void setup(){
  servoEyes.attach(11);
  servoEyes.write(90);
  servoRight.attach(13);
  servoLeft.attach(12);
  servoGripper.attach(10);// attaches the servo on pin 9 to the servo object
  servoGripper.write(90);
  pinMode(encoderLeft, INPUT);
  pinMode(encoderRight,INPUT);
  Serial.begin(9600);
}

void loop(){
  if(CheckGround(LS) && CheckGround(RS)) // Forward
  forward(1)
  else if(CheckGround(LS) && !CheckGround(RS))// Turn Left
  reverse()
  turnLeft()
  else if(!CheckGround(LS) && CheckGround(RS))// Turn Right
  reverse()
  turnRight()
  else if(!CheckGround(LS) && !CheckGround(RS))// Turn Left/Right
  reverse()
  turnLeft()
}
